// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
	let twoToThe = Array.new(16);
    	//a while loop that adds the previous term two times is indeed faster to write, though computtionally less efficient
    	let twoToThe[0] = 1; let twoToThe[1] = 2; let twoToThe[2] = 4; let twoToThe[3] = 8;
    	let twoToThe[4] = 16; let twoToThe[5] = 32; let twoToThe[6] = 64; let twoToThe[7] = 128;
    	let twoToThe[8] = 256; let twoToThe[9] = 512; let twoToThe[10] = 1024; let twoToThe[11] = 2048;
    	let twoToThe[12] = 4096; let twoToThe[13] = 8192; let twoToThe[14] = 16384; let twoToThe[15] = 16384 + 16384;
    	//1000 000 000 000 is -32768, not 32768, due to working in twos complement
	return;
    }
    
    function boolean bit (int x, int i) {
    	if (x & twoToThe[i] = 0) {
    		return false;
    	}
    	return true;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if (x < 0) {
    		return -x;
    	}
    	else {
    		return x;
    	}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int sum, shiftedX, i;
    	let sum = 0; let shiftedX = x; let i = 0;
    	while (i < 16) {
    		if (Math.bit(y, i)) {
    			let sum = sum + shiftedX;
    		}
    		let shiftedX = shiftedX + shiftedX;
    		let i = i + 1;
    	}
    	return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    	var int q;

	if ((x < 0) & (y < 0)){
		return Math.divide(-x, -y);
	}

	if (y < 0) {
		return - Math.divide(x, -y);
	}

	if (x < 0) {
		return - Math.divide(-x, y);
	}
	
	if (y > x) {
    		return 0;
    	}

    	let q = Math.divide(x, y+y);
    	if ((x - ((q + q) * y)) < y) {
    		return q + q;
    	}
    	else {
    		return q + q + 1;
    	}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int low, high, med;

	if (x < 0){
		do Output.printString("Invalid integer, must be greater than 0");
		do Sys.halt();
	}

	//we put x >= 32761 (which is 181*181) as a special case, otherwise the function 
	//will never converge for these values, and remain stuck in an infinite loop
	if (x > 32760){
		return 181;
	}

    	let low = 0; let high = 182; let med = 0;
    	while (low < high) {
    		let med = (low + high) / 2;
    		if ((med * med) > x) {
    			let high = med - 1;
    		}
    		else {
    			let low = med + 1;
    		}
    	}

	//we make sure that the loop did not stop slightly above the integer sqare root of x
	if ( ((low * low) > x) & (low > 0 ) ) {
		return low - 1;
	}
    	return low;
    }
    

    function int modulo (int x, int y) {
    	return x - ((x / y) * y);
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if (a > b) {
    		return a;
    	}
    	return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if (b > a) {
    		return a;
    	}
    	return b;
    }
    
}
